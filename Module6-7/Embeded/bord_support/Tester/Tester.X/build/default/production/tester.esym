D G "__PCD__" 0 0 ""5.015""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""01-Nov-16""
D G "__TIME__" 0 0 ""06:37:40""
D G "__PIC24FJ48GA002__" 0 0 "1" "* File:    tester.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 44 "int16" `53 
f B "set_tris_a" 2 44 "void(int16 value)" `52 
v L "value" 2 45 "int16" `55 
f B "set_tris_b" 2 45 "void(int16 value)" `54 
f B "get_tris_a" 2 46 "int16()" `56 
f B "get_tris_b" 2 47 "int16()" `57 
v L "value" 2 48 "int16" `59 
f B "output_a" 2 48 "void(int16 value)" `58 
v L "value" 2 49 "int16" `61 
f B "output_b" 2 49 "void(int16 value)" `60 
f B "input_a" 2 50 "int16()" `62 
f B "input_b" 2 51 "int16()" `63 
f B "input_change_a" 2 52 "int8()" `64 
f B "input_change_b" 2 53 "int8()" `65 
v L "state" 2 54 "int8" `67 
f B "set_pullup" 2 54 "void(int8 state)" `66 
v L "state" 2 55 "int8" `69 
v L "pin" 2 55 "int16" `70 
f G "set_pullup" 2 55 "void(int8 state,int16 pin)" `68 
v L "state" 2 56 "int8" `72 
f B "set_pulldown" 2 56 "void(int8 state)" `71 
v L "state" 2 57 "int8" `74 
v L "pin" 2 57 "int16" `75 
f G "set_pulldown" 2 57 "void(int8 state,int16 pin)" `73 
v L "pin" 2 58 "int16" `77 
f B "input" 2 58 "int8(int16 pin)" `76 
v L "pin" 2 59 "int16" `79 
f B "input_state" 2 59 "int8(int16 pin)" `78 
v L "pin" 2 60 "int16" `81 
f B "output_low" 2 60 "void(int16 pin)" `80 
v L "pin" 2 61 "int16" `83 
f B "output_high" 2 61 "void(int16 pin)" `82 
v L "pin" 2 62 "int16" `85 
f B "output_toggle" 2 62 "void(int16 pin)" `84 
v L "pin" 2 63 "int16" `87 
v L "level" 2 63 "int8" `88 
f B "output_bit" 2 63 "void(int16 pin,int8 level)" `86 
v L "pin" 2 64 "int16" `90 
f B "output_float" 2 64 "void(int16 pin)" `89 
v L "pin" 2 65 "int16" `92 
f B "output_drive" 2 65 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 68 "5648"
d G "PIN_A1" 2 69 "5649"
d G "PIN_A2" 2 70 "5650"
d G "PIN_A3" 2 71 "5651"
d G "PIN_A4" 2 72 "5652"
d G "PIN_B0" 2 74 "5712"
d G "PIN_B1" 2 75 "5713"
d G "PIN_B2" 2 76 "5714"
d G "PIN_B3" 2 77 "5715"
d G "PIN_B4" 2 78 "5716"
d G "PIN_B5" 2 79 "5717"
d G "PIN_B6" 2 80 "5718"
d G "PIN_B7" 2 81 "5719"
d G "PIN_B8" 2 82 "5720"
d G "PIN_B9" 2 83 "5721"
d G "PIN_B10" 2 84 "5722"
d G "PIN_B11" 2 85 "5723"
d G "PIN_B12" 2 86 "5724"
d G "PIN_B13" 2 87 "5725"
d G "PIN_B14" 2 88 "5726"
d G "PIN_B15" 2 89 "5727"
d G "FALSE" 2 92 "0"
d G "TRUE" 2 93 "1"
d G "BYTE" 2 95 "unsigned int8"
d G "BOOLEAN" 2 96 "int1"
d G "getc" 2 98 "getch"
d G "fgetc" 2 99 "getch"
d G "getchar" 2 100 "getch"
d G "putc" 2 101 "putchar"
d G "fputc" 2 102 "putchar"
d G "fgets" 2 103 "gets"
d G "fputs" 2 104 "puts"
c L "output_drive" 2 1 2 "FUNCTION"
v L "baud" 2 108 "int32" `94 
f B "setup_uart" 2 108 "void(int32 baud)" `93 
v L "baud" 2 109 "int32" `96 
v L "stream" 2 109 "int8" `97 
f G "setup_uart" 2 109 "void(int32 baud,int8 stream)" `95 
v L "baud" 2 110 "int32" `99 
v L "stream" 2 110 "int8" `100 
v L "clock" 2 110 "int32" `101 
f G "setup_uart" 2 110 "void(int32 baud,int8 stream,int32 clock)" `98 
v L "baud" 2 111 "int32" `103 
f B "set_uart_speed" 2 111 "void(int32 baud)" `102 
v L "baud" 2 112 "int32" `105 
v L "stream" 2 112 "int8" `106 
f G "set_uart_speed" 2 112 "void(int32 baud,int8 stream)" `104 
v L "baud" 2 113 "int32" `108 
v L "stream" 2 113 "int8" `109 
v L "clock" 2 113 "int32" `110 
f G "set_uart_speed" 2 113 "void(int32 baud,int8 stream,int32 clock)" `107  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 117 "2"
d G "UART_DATA" 2 118 "4"
d G "UART_AUTODETECT" 2 119 "8"
d G "UART_AUTODETECT_NOWAIT" 2 120 "9"
d G "UART_WAKEUP_ON_RDA" 2 121 "10"
d G "UART_SEND_BREAK" 2 122 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 127 "int8" `112 
f B "setup_wdt" 2 127 "void(int8 mode)" `111 
f B "restart_wdt" 2 128 "void()" `113  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 130 "1"
d G "WDT_OFF" 2 131 "0"
d G "WDT_1MS" 2 133 "0x002"
d G "WDT_2MS" 2 134 "0x003"
d G "WDT_4MS" 2 135 "0x004"
d G "WDT_8MS" 2 136 "0x005"
d G "WDT_16MS" 2 137 "0x006"
d G "WDT_32MS" 2 138 "0x007"
d G "WDT_64MS" 2 139 "0x008"
d G "WDT_128MS" 2 140 "0x009"
d G "WDT_256MS" 2 141 "0x00A"
d G "WDT_512MS" 2 142 "0x00B"
d G "WDT_1S" 2 143 "0x00C"
d G "WDT_2S" 2 144 "0x00D"
d G "WDT_4S" 2 145 "0x00E"
d G "WDT_8S" 2 146 "0x00F"
d G "WDT_16S" 2 147 "0x010"
d G "WDT_33S" 2 148 "0x011"
d G "WDT_65S" 2 149 "0x030"
d G "WDT_131S" 2 150 "0x031"
c L "restart_wdt" 2 1 3 "FUNCTION"
f B "restart_cause" 2 155 "int8()" `114 
f B "reset_cpu" 2 156 "void()" `115 
f B "sleep" 2 157 "void()" `116 
v L "mode" 2 158 "int8" `118 
f G "sleep" 2 158 "void(int8 mode)" `117  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 160 "0"
d G "RESTART_BROWNOUT" 2 161 "1"
d G "RESTART_WATCHDOG" 2 162 "4"
d G "RESTART_SOFTWARE" 2 163 "6"
d G "RESTART_MCLR" 2 164 "7"
d G "RESTART_ILLEGAL_OP" 2 165 "14"
d G "RESTART_TRAP_CONFLICT" 2 166 "15"
d G "SLEEP_FULL" 2 169 "0" "Default"
d G "SLEEP_IDLE" 2 170 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 2 "FUNCTION"
v L "type" 2 174 "int8" `120 
v L "target" 2 174 "int32" `121 
f B "setup_oscillator" 2 174 "void(int8 type,int32 target)" `119 
v L "type" 2 175 "int8" `123 
v L "target" 2 175 "int32" `124 
v L "source" 2 175 "int32" `125 
f G "setup_oscillator" 2 175 "void(int8 type,int32 target,int32 source)" `122  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 177 "32"
d G "OSC_CRYSTAL" 2 178 "1"
d G "OSC_CLOCK" 2 179 "2"
d G "OSC_RC" 2 180 "3"
d G "OSC_SECONDARY" 2 181 "16"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 187 "int16" `127 
f B "setup_timer1" 2 187 "void(int16 mode)" `126 
v L "mode" 2 188 "int16" `129 
v L "period" 2 188 "int16" `130 
f G "setup_timer1" 2 188 "void(int16 mode,int16 period)" `128 
f B "get_timer1" 2 189 "int16()" `131 
v L "value" 2 190 "int16" `133 
f B "set_timer1" 2 190 "void(int16 value)" `132 
v L "mode" 2 191 "int16" `135 
f B "setup_timer2" 2 191 "void(int16 mode)" `134 
v L "mode" 2 192 "int16" `137 
v L "period" 2 192 "int16" `138 
f G "setup_timer2" 2 192 "void(int16 mode,int16 period)" `136 
f B "get_timer2" 2 193 "int16()" `139 
v L "value" 2 194 "int16" `141 
f B "set_timer2" 2 194 "void(int16 value)" `140 
v L "mode" 2 195 "int16" `143 
f B "setup_timer3" 2 195 "void(int16 mode)" `142 
v L "mode" 2 196 "int16" `145 
v L "period" 2 196 "int16" `146 
f G "setup_timer3" 2 196 "void(int16 mode,int16 period)" `144 
f B "get_timer3" 2 197 "int16()" `147 
v L "value" 2 198 "int16" `149 
f B "set_timer3" 2 198 "void(int16 value)" `148 
f B "get_timer23" 2 199 "int32()" `150 
v L "value" 2 200 "int32" `152 
f B "set_timer23" 2 200 "void(int32 value)" `151 
v L "mode" 2 201 "int16" `154 
f B "setup_timer4" 2 201 "void(int16 mode)" `153 
v L "mode" 2 202 "int16" `156 
v L "period" 2 202 "int16" `157 
f G "setup_timer4" 2 202 "void(int16 mode,int16 period)" `155 
f B "get_timer4" 2 203 "int16()" `158 
v L "value" 2 204 "int16" `160 
f B "set_timer4" 2 204 "void(int16 value)" `159 
v L "mode" 2 205 "int16" `162 
f B "setup_timer5" 2 205 "void(int16 mode)" `161 
v L "mode" 2 206 "int16" `164 
v L "period" 2 206 "int16" `165 
f G "setup_timer5" 2 206 "void(int16 mode,int16 period)" `163 
f B "get_timer5" 2 207 "int16()" `166 
v L "value" 2 208 "int16" `168 
f B "set_timer5" 2 208 "void(int16 value)" `167 
f B "get_timer45" 2 209 "int32()" `169 
v L "value" 2 210 "int32" `171 
f B "set_timer45" 2 210 "void(int32 value)" `170  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 213 "0x0000"
d G "TMR_INTERNAL" 2 214 "0x8000"
d G "TMR_EXTERNAL" 2 215 "0x8002"
d G "TMR_GATE" 2 216 "0x0040"
d G "TMR_DIV_BY_1" 2 218 "0x0000"
d G "TMR_DIV_BY_8" 2 219 "0x0010"
d G "TMR_DIV_BY_64" 2 220 "0x0020"
d G "TMR_DIV_BY_256" 2 221 "0x0030"
d G "TMR_32_BIT" 2 222 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 2 224 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 225 "0x0000"
d G "T1_EXTERNAL_SYNC" 2 227 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 2 228 "0xC002" "This only applies to Timer1"
c L "set_timer45" 2 1 3 "FUNCTION"
v L "module" 2 232 "int8" `173 
v L "mode" 2 232 "int16" `174 
f B "setup_capture" 2 232 "void(int8 module,int16 mode)" `172 
v L "module" 2 233 "int8" `176 
f B "get_capture" 2 233 "int16(int8 module)" `175 
v L "module" 2 234 "int8" `178 
v L "wait" 2 234 "int8" `179 
f G "get_capture" 2 234 "int16(int8 module,int8 wait)" `177  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 236 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 237 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 238 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 239 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 240 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 241 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 242 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 245 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 246 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 247 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 248 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 251 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 252 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 255 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 256 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 1 3 "FUNCTION"
v L "module" 2 261 "int8" `181 
v L "mode" 2 261 "int16" `182 
f B "setup_compare" 2 261 "void(int8 module,int16 mode)" `180 
v L "module" 2 262 "int8" `184 
v L "duty" 2 262 "int16" `185 
f B "set_pwm_duty" 2 262 "void(int8 module,int16 duty)" `183 
v L "module" 2 263 "int8" `187 
v L "ocr" 2 263 "int16" `188 
f B "set_compare_time" 2 263 "void(int8 module,int16 ocr)" `186 
v L "module" 2 264 "int8" `190 
v L "ocr" 2 264 "int16" `191 
v L "ocrs" 2 264 "int16" `192 
f G "set_compare_time" 2 264 "void(int8 module,int16 ocr,int16 ocrs)" `189  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 266 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 267 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 268 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 2 269 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 270 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 271 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 272 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 273 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 276 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 277 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 280 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 281 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 1 3 "FUNCTION"
v L "mode" 2 286 "int16" `194 
f B "setup_spi" 2 286 "void(int16 mode)" `193 
v L "data" 2 287 "int8" `196 
f B "spi_write" 2 287 "void(int8 data)" `195 
f B "spi_read" 2 288 "int8()" `197 
v L "data" 2 289 "int8" `199 
f G "spi_read" 2 289 "int8(int8 data)" `198 
f B "spi_data_in" 2 290 "int8()" `200 
v L "mode" 2 291 "int16" `202 
f B "setup_spi2" 2 291 "void(int16 mode)" `201 
v L "data" 2 292 "int8" `204 
f B "spi_write2" 2 292 "void(int8 data)" `203 
f B "spi_read2" 2 293 "int8()" `205 
v L "data" 2 294 "int8" `207 
f G "spi_read2" 2 294 "int8(int8 data)" `206 
f B "spi_data_in2" 2 295 "int8()" `208  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 298 "0x0020"
d G "SPI_SLAVE" 2 299 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 301 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 302 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 304 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 305 "0x0000"
d G "SPI_MODE_16B" 2 307 "0x0400"
d G "SPI_MODE_8B" 2 308 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 310 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 311 "0x0000"
d G "SPI_SS_ENABLED" 2 313 "0x0000"
d G "SPI_SS_DISABLED" 2 314 "0x0080"
d G "SPI_CLK_DIV_1" 2 317 "0x001F"
d G "SPI_CLK_DIV_2" 2 318 "0x001B"
d G "SPI_CLK_DIV_3" 2 319 "0x0017"
d G "SPI_CLK_DIV_4" 2 320 "0x001E"
d G "SPI_CLK_DIV_5" 2 321 "0x000F"
d G "SPI_CLK_DIV_6" 2 322 "0x000B"
d G "SPI_CLK_DIV_7" 2 323 "0x0007"
d G "SPI_CLK_DIV_8" 2 324 "0x0003"
d G "SPI_CLK_DIV_12" 2 325 "0x0016"
d G "SPI_CLK_DIV_16" 2 326 "0x001D"
d G "SPI_CLK_DIV_20" 2 327 "0x000E"
d G "SPI_CLK_DIV_24" 2 328 "0x000A"
d G "SPI_CLK_DIV_28" 2 329 "0x0006"
d G "SPI_CLK_DIV_32" 2 330 "0x0002"
d G "SPI_CLK_DIV_48" 2 331 "0x0015"
d G "SPI_CLK_DIV_64" 2 332 "0x001C"
d G "SPI_CLK_DIV_80" 2 333 "0x000D"
d G "SPI_CLK_DIV_96" 2 334 "0x0009"
d G "SPI_CLK_DIV_112" 2 335 "0x0005"
d G "SPI_CLK_DIV_128" 2 336 "0x0001"
d G "SPI_CLK_DIV_192" 2 337 "0x0014"
d G "SPI_CLK_DIV_256" 2 338 "0x0010"
d G "SPI_CLK_DIV_320" 2 339 "0x000C"
d G "SPI_CLK_DIV_384" 2 340 "0x0008"
d G "SPI_CLK_DIV_448" 2 341 "0x0004"
d G "SPI_CLK_DIV_512" 2 342 "0x0000"
d G "SPI_L_TO_H" 2 345 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 346 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 4 "FUNCTION"
v L "mode" 2 352 "int32" `210 
f B "setup_adc" 2 352 "void(int32 mode)" `209 
v L "pins" 2 353 "int32" `212 
f B "setup_adc_ports" 2 353 "void(int32 pins)" `211 
v L "pins" 2 354 "int32" `214 
v L "reference" 2 354 "int16" `215 
f G "setup_adc_ports" 2 354 "void(int32 pins,int16 reference)" `213 
v L "??65535" 2 355 "int8" `217 
f B "set_adc_channel" 2 355 "void(int8 )" `216 
f B "read_adc" 2 356 "int16()" `218 
v L "mode" 2 357 "int8" `220 
f G "read_adc" 2 357 "int16(int8 mode)" `219 
f B "adc_done" 2 358 "int8()" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 362 "0x10000"
d G "ADC_CLOCK" 2 363 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 364 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 365 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 366 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 367 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 368 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 369 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 370 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 2 374 "0x1F00"
d G "ADC_TAD_MUL_2" 2 375 "0x1D00"
d G "ADC_TAD_MUL_4" 2 376 "0x1B00"
d G "ADC_TAD_MUL_8" 2 377 "0x1700"
d G "ADC_TAD_MUL_16" 2 378 "0x0F00"
d G "ADC_TAD_MUL_31" 2 379 "0x0000"
d G "ADC_START_AND_READ" 2 382 "0x07"
d G "ADC_START_ONLY" 2 383 "0x01"
d G "ADC_READ_ONLY" 2 384 "0x06"
d G "NO_ANALOGS" 2 389 "0" "None"
d G "ALL_ANALOG" 2 390 "0xFFFFFFFF" "All"
d G "sAN0" 2 391 "0x00000001" "| A0"
d G "sAN1" 2 392 "0x00000002" "| A1"
d G "sAN2" 2 393 "0x00000004" "| B0"
d G "sAN3" 2 394 "0x00000008" "| B1"
d G "sAN4" 2 395 "0x00000010" "| B2"
d G "sAN5" 2 396 "0x00000020" "| B3"
d G "sAN9" 2 397 "0x00000200" "| B15"
d G "sAN10" 2 398 "0x00000400" "| B14"
d G "sAN11" 2 399 "0x00000800" "| B13"
d G "sAN12" 2 400 "0x00001000" "| B12"
d G "VSS_VDD" 2 403 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 404 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 405 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 406 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 1 4 "FUNCTION"
v L "mode" 2 412 "int16" `223 
f B "setup_comparator" 2 412 "void(int16 mode)" `222  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 414 "0"
d G "B2_B3_NC_NC" 2 415 "0x401"
d G "B2_VR_NC_NC" 2 416 "0x400"
d G "B3_VR_NC_NC" 2 417 "0x402"
d G "NC_NC_B0_B1" 2 418 "0x804"
d G "NC_NC_B0_VR" 2 419 "0x800"
d G "NC_NC_B1_VR" 2 420 "0x808"
d G "B2_B3_B0_B1" 2 421 "B2_B3_NC_NC | NC_NC_B0_B1"
d G "B2_VR_B0_VR" 2 422 "B2_VR_NC_NC | NC_NC_B0_VR"
d G "B3_VR_B1_VR" 2 423 "B3_VR_NC_NC | NC_NC_B1_VR"
d G "C1_INVERT" 2 425 "0x10"
d G "C2_INVERT" 2 426 "0x20"
d G "C1_OUTPUT" 2 427 "0x100"
d G "C2_OUTPUT" 2 428 "0x200"
c L "setup_comparator" 2 1 2 "FUNCTION"
v L "mode" 2 435 "int16" `227 
f B "setup_vref" 2 435 "void(int16 mode)" `226  "Constants used in setup_vref() are:"
d G "VREF_DISABLED" 2 437 "0x0000"
d G "VREF_VSS_VDD" 2 438 "0x0080"
d G "VREF_ANALOG" 2 439 "0x0090"
d G "VREF_HIGH" 2 441 "0x0080"
d G "VREF_LOW" 2 442 "0x00A0"
d G "VREF_OUTPUT" 2 444 "0x0040"
c L "setup_vref" 2 1 7 "FUNCTION"
v L "mode" 2 453 "int32" `229 
v L "address_mask" 2 453 "int16" `230 
f B "setup_pmp" 2 453 "void(int32 mode,int16 address_mask)" `228 
v L "address" 2 454 "int16" `232 
f B "pmp_address" 2 454 "void(int16 address)" `231 
f B "pmp_read" 2 455 "int8()" `233 
v L "data" 2 456 "int8" `235 
f B "pmp_write" 2 456 "void(int8 data)" `234 
f B "pmp_output_full" 2 457 "int8()" `236 
f B "pmp_input_full" 2 458 "int8()" `237 
f B "pmp_overflow" 2 459 "int8()" `238 
v L "mode" 2 460 "int32" `240 
v L "address_mask" 2 460 "int16" `241 
f B "setup_psp" 2 460 "void(int32 mode,int16 address_mask)" `239 
f B "psp_read" 2 461 "int8()" `242 
v L "address" 2 462 "int16" `244 
f G "psp_read" 2 462 "int8(int16 address)" `243 
v L "data" 2 463 "int8" `246 
f B "psp_write" 2 463 "void(int8 data)" `245 
v L "data" 2 464 "int8" `248 
v L "address" 2 464 "int16" `249 
f G "psp_write" 2 464 "void(int8 data,int16 address)" `247 
f B "psp_output_full" 2 465 "int8()" `250 
f B "psp_input_full" 2 466 "int8()" `251 
f B "psp_overflow" 2 467 "int8()" `252  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
d G "PAR_ENABLE" 2 469 "0x8000"
d G "PAR_DISABLE" 2 470 "0x0000" "Module enable/disable options"
d G "PAR_STOP_IN_IDLE" 2 471 "0x2000"
d G "PAR_CONTINUE_IN_IDLE" 2 472 "0x0000"
d G "PAR_ADDR_NOT_MULTIPLEXED" 2 473 "0x0000" "Address multiplexing options"
d G "PAR_LOW_ADDR_MULTIPLEXED" 2 474 "0x0800" "Address multiplexing options"
d G "PAR_FULL_ADDR_MULTIPLEXED" 2 475 "0x1000" "Address multiplexing options"
d G "PAR_PTBEEN_ENABLE" 2 476 "0x0400" "Byte Enable Port Enable bit"
d G "PAR_PTWREN_ENABLE" 2 477 "0x0200" "Write Enable Strobe bit"
d G "PAR_PTRDEN_ENABLE" 2 478 "0x0100" "Read/Write Strobe Port bit"
d G "PAR_ALP_ACTIVE_HIGH" 2 479 "0x0020" "Address latch polarity high"
d G "PAR_BEP_ACTIVE_HIGH" 2 480 "0x0004" "Byte Enable Polarity"
d G "PAR_WRSP_ACTIVE_HIGH" 2 481 "0x0002" "Write strobe Polarity bit"
d G "PAR_RDSP_ACTIVE_HIGH" 2 482 "0x0001" "Read strobe Polarity bit"
d G "PAR_CS_XX" 2 483 "0x0000" "Chip select pins used for address"
d G "PAR_CS_X1" 2 484 "0x0008" "Chip select pin 1 used, active high"
d G "PAR_CS_X0" 2 485 "0x0000" "Chip select pin 1 used, active low"
d G "PAR_CS_1X" 2 486 "0x0050" "Chip select pin 2 used, active high"
d G "PAR_CS_0X" 2 487 "0x0040" "Chip select pin 2 used, active low"
d G "PAR_CS_00" 2 488 "0x0080" "Chip select pins 1,2 used, active low"
d G "PAR_CS_11" 2 489 "0x0098" "Chip select pins 1,2 used, active high"
d G "PAR_CS_10" 2 490 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
d G "PAR_CS_01" 2 491 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
d G "PAR_INTR_ON_RW" 2 492 "0x20000000" "Interrupt on read write"
d G "PAR_NO_INTR_STALL_ACTIVATED" 2 493 "0x40000000" "No interrupt, processor stall activated"
d G "PAR_INTR_ON_3_RW_BUF" 2 494 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
d G "PAR_PSP_AUTO_INC" 2 495 "0x18000000" "Read write buffers auto increment"
d G "PAR_DEC_ADDR" 2 496 "0x10000000" "Increment the address"
d G "PAR_INC_ADDR" 2 497 "0x08000000" "Decrement the address"
d G "PAR_MASTER_MODE_1" 2 498 "0x03000000" "Master mode 1"
d G "PAR_MASTER_MODE_2" 2 499 "0x02000000" "Master mode 2"
d G "PAR_WAITB1" 2 500 "0x00000000" "1 Tcy Wait state for data setup R/W"
d G "PAR_WAITB2" 2 501 "0x00400000" "2 Tcy Wait state for data setup R/W"
d G "PAR_WAITB3" 2 502 "0x00800000" "3 Tcy Wait state for data setup R/W"
d G "PAR_WAITB4" 2 503 "0x00C00000" "4 Tcy Wait state for data setup R/W"
d G "PAR_WAITM0" 2 504 "0x00000000" "0 wait state for Read to byte"
d G "PAR_WAITM1" 2 505 "0x00040000" "1 Tcy wait state for Read to byte"
d G "PAR_WAITM2" 2 506 "0x00080000" "2 Tcy wait state for Read to byte"
d G "PAR_WAITM3" 2 507 "0x000C0000" "3 Tcy wait state for Read to byte"
d G "PAR_WAITM15" 2 508 "0x003C0000" "15 wait states"
d G "PAR_WAITE1" 2 509 "0x00000000" "1 Tcy Wait for data hold after strobe"
d G "PAR_WAITE2" 2 510 "0x00010000" "2 Tcy Wait for data hold after strobe"
d G "PAR_WAITE3" 2 511 "0x00020000" "3 Tcy Wait for data hold after strobe"
d G "PAR_WAITE4" 2 512 "0x00030000" "4 Tcy Wait for data hold after strobe"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "poly_terms" 2 517 "int8" `254 
f B "setup_crc" 2 517 "void(int8 poly_terms,*int8 _VA_LIST)" `253 
v L "value" 2 518 "int16" `257 
f B "crc_init" 2 518 "void(int16 value)" `256 
v L "data" 2 519 "int16" `259 
f B "crc_calc" 2 519 "int16(int16 data)" `258 
v L "ptr" 2 520 "*int16" `261 
v L "count" 2 520 "int16" `262 
f G "crc_calc" 2 520 "int16(*int16 ptr,int16 count)" `260 
v L "data" 2 521 "int8" `264 
f B "crc_calc8" 2 521 "int8(int8 data)" `263 
v L "ptr" 2 522 "*int8" `266 
v L "count" 2 522 "int16" `267 
f G "crc_calc8" 2 522 "int8(*int8 ptr,int16 count)" `265  "RTC"
c L "crc_calc8" 2 1 3 "FUNCTION"
c L "crc_calc8" 2 1 1 "FUNCTION"
c L "crc_calc8" 2 1 1 "FUNCTION"
t G "rtc_time_t" 2 538 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `278  "RTC Protoyptes:"
v L "mode" 2 540 "int16" `280 
v L "calibration" 2 540 "int8" `281 
f B "setup_rtc" 2 540 "void(int16 mode,int8 calibration)" `279 
v L "mode" 2 541 "int16" `283 
v L "mask" 2 541 "int16" `284 
v L "repeat" 2 541 "int8" `285 
f B "setup_rtc_alarm" 2 541 "void(int16 mode,int16 mask,int8 repeat)" `282 
v L "time" 2 542 "*rtc_time_t" `287 
f B "rtc_read" 2 542 "void(*rtc_time_t time)" `286 
v L "time" 2 543 "*rtc_time_t" `289 
f B "rtc_write" 2 543 "void(*rtc_time_t time)" `288 
v L "time" 2 544 "*rtc_time_t" `291 
f B "rtc_read_alarm" 2 544 "void(*rtc_time_t time)" `290 
v L "time" 2 545 "*rtc_time_t" `293 
f B "rtc_write_alarm" 2 545 "void(*rtc_time_t time)" `292  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 2 547 "0x8000"
d G "RTC_DISABLE" 2 548 "0"
d G "RTC_OUTPUT_SECONDS" 2 549 "0x20400"
d G "RTC_OUTPUT_ALARM" 2 550 "0x00400"
d G "RTC_ALARM_ENABLE" 2 553 "0x8000"
d G "RTC_ALARM_DISABLE" 2 554 "0"
d G "RTC_CHIME_ENABLE" 2 555 "0x4000"
d G "RTC_CHIME_DISABLE" 2 556 "0"
d G "RTC_ALARM_HALFSECOND" 2 558 "0x0000"
d G "RTC_ALARM_SECOND" 2 559 "0x0400"
d G "RTC_ALARM_10_SECONDS" 2 560 "0x0800"
d G "RTC_ALARM_MINUTE" 2 561 "0x0C00"
d G "RTC_ALARM_10_MINUTES" 2 562 "0x1000"
d G "RTC_ALARM_HOUR" 2 563 "0x1400"
d G "RTC_ALARM_DAY" 2 564 "0x1800"
d G "RTC_ALARM_WEEK" 2 565 "0x1C00"
d G "RTC_ALARM_MONTH" 2 566 "0x2000"
d G "RTC_ALARM_YEAR" 2 567 "0x2400"
c L "rtc_write_alarm" 2 1 3 "FUNCTION"
v L "x" 2 573 "sint8" `295 
f B "abs" 2 573 "sint8(sint8 x)" `294 
v L "x" 2 574 "sint16" `297 
f G "abs" 2 574 "sint16(sint16 x)" `296 
v L "x" 2 575 "sint32" `299 
f G "abs" 2 575 "sint32(sint32 x)" `298 
v L "x" 2 576 "float" `301 
f G "abs" 2 576 "float(float x)" `300 
v L "??65535" 2 577 "int8" `303 
v L "??65535" 2 577 "int8" `304 
f B "_mul" 2 577 "int16(int8 ,int8 )" `302 
v L "??65535" 2 578 "sint8" `303 
v L "??65535" 2 578 "sint8" `307 
f G "_mul" 2 578 "sint16(sint8 ,sint8 )" `305 
v L "??65535" 2 579 "int16" `303 
v L "??65535" 2 579 "int16" `310 
f G "_mul" 2 579 "int32(int16 ,int16 )" `308 
v L "??65535" 2 580 "sint16" `303 
v L "??65535" 2 580 "sint16" `313 
f G "_mul" 2 580 "sint32(sint16 ,sint16 )" `311 
v L "x" 2 581 "?" `315 
f G "abs" 2 581 "?(? x)" `314 
v L "x" 2 582 "?" `317 
f G "abs" 2 582 "?(? x)" `316 
v L "x" 2 583 "?" `319 
f G "abs" 2 583 "?(? x)" `318 
v L "x" 2 584 "?" `321 
f G "abs" 2 584 "?(? x)" `320 
v L "??65535" 2 585 "int32" `303 
v L "??65535" 2 585 "int32" `324 
f G "_mul" 2 585 "?(int32 ,int32 )" `322 
v L "??65535" 2 586 "sint32" `303 
v L "??65535" 2 586 "sint32" `327 
f G "_mul" 2 586 "?(sint32 ,sint32 )" `325 
v L "??65535" 2 587 "?" `303 
v L "??65535" 2 587 "?" `330 
f G "_mul" 2 587 "?(? ,? )" `328 
v L "??65535" 2 588 "?" `303 
v L "??65535" 2 588 "?" `333 
f G "_mul" 2 588 "?(? ,? )" `331  "Memory Manipulation Prototypes:"
v L "dest" 2 591 "*sint8" `335 
v L "src" 2 591 "*sint8" `336 
f B "strcpy" 2 591 "void(*sint8 dest,*sint8 src)" `334 
v L "dest" 2 592 "*sint8" `338 
v L "src" 2 592 "*sint8" `339 
f B "strcopy" 2 592 "void(*sint8 dest,*sint8 src)" `337 
v L "destination" 2 593 "*int8" `341 
v L "value" 2 593 "int8" `342 
v L "num" 2 593 "int16" `343 
f B "memset" 2 593 "void(*int8 destination,int8 value,int16 num)" `340 
v L "destination" 2 594 "*int8" `345 
v L "source" 2 594 "*int8" `346 
v L "num" 2 594 "int16" `347 
f B "memcpy" 2 594 "void(*int8 destination,*int8 source,int16 num)" `344  "Data Manipulators Prototypes:"
v L "address" 2 597 "*int8" `349 
v L "bytes" 2 597 "int8" `350 
v L "value" 2 597 "int8" `351 
f B "shift_left" 2 597 "int8(*int8 address,int8 bytes,int8 value)" `348 
v L "address" 2 598 "*int8" `353 
v L "bytes" 2 598 "int8" `354 
v L "value" 2 598 "int8" `355 
f B "shift_right" 2 598 "int8(*int8 address,int8 bytes,int8 value)" `352 
v L "address" 2 599 "*int8" `357 
v L "bytes" 2 599 "int8" `358 
f B "rotate_left" 2 599 "void(*int8 address,int8 bytes)" `356 
v L "address" 2 600 "*int8" `360 
v L "bytes" 2 600 "int8" `361 
f B "rotate_right" 2 600 "void(*int8 address,int8 bytes)" `359 
v L "value" 2 601 "int8" `363 
f B "swap" 2 601 "void(int8 value)" `362 
v L "var" 2 602 "int16" `365 
v L "offset" 2 602 "int8" `366 
f B "make8" 2 602 "int8(int16 var,int8 offset)" `364 
v L "var" 2 603 "int32" `365 
v L "offset" 2 603 "int8" `369 
f G "make8" 2 603 "int8(int32 var,int8 offset)" `367 
v L "varhigh" 2 604 "int8" `371 
v L "varlow" 2 604 "int8" `372 
f B "make16" 2 604 "int16(int8 varhigh,int8 varlow)" `370 
v L "var1" 2 605 "int16" `374 
f B "make32" 2 605 "int32(int16 var1)" `373 
v L "var1" 2 606 "int16" `376 
v L "var2" 2 606 "int16" `377 
f G "make32" 2 606 "int32(int16 var1,int16 var2)" `375 
v L "var1" 2 607 "int16" `376 
v L "var2" 2 607 "int8" `380 
f G "make32" 2 607 "int32(int16 var1,int8 var2)" `378 
v L "var1" 2 608 "int16" `382 
v L "var2" 2 608 "int8" `383 
v L "var3" 2 608 "int8" `384 
f G "make32" 2 608 "int32(int16 var1,int8 var2,int8 var3)" `381 
v L "var1" 2 609 "int8" `386 
f G "make32" 2 609 "int32(int8 var1)" `385 
v L "var1" 2 610 "int8" `376 
v L "var2" 2 610 "int8" `389 
f G "make32" 2 610 "int32(int8 var1,int8 var2)" `387 
v L "var1" 2 611 "int8" `382 
v L "var2" 2 611 "int8" `383 
v L "var3" 2 611 "int8" `393 
f G "make32" 2 611 "int32(int8 var1,int8 var2,int8 var3)" `390 
v L "var1" 2 612 "int8" `395 
v L "var2" 2 612 "int8" `396 
v L "var3" 2 612 "int8" `397 
v L "var4" 2 612 "int8" `398 
f G "make32" 2 612 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `394 
v L "var1" 2 613 "int8" `376 
v L "var2" 2 613 "int16" `401 
f G "make32" 2 613 "int32(int8 var1,int16 var2)" `399 
v L "var1" 2 614 "int8" `382 
v L "var2" 2 614 "int16" `383 
v L "var3" 2 614 "int8" `405 
f G "make32" 2 614 "int32(int8 var1,int16 var2,int8 var3)" `402 
v L "var1" 2 615 "int8" `382 
v L "var2" 2 615 "int8" `383 
v L "var3" 2 615 "int16" `409 
f G "make32" 2 615 "int32(int8 var1,int8 var2,int16 var3)" `406 
v L "var" 2 616 "int8" `411 
v L "bit" 2 616 "int8" `412 
f B "bit_set" 2 616 "void(int8 var,int8 bit)" `410 
v L "var" 2 617 "int16" `411 
v L "bit" 2 617 "int8" `415 
f G "bit_set" 2 617 "void(int16 var,int8 bit)" `413 
v L "var" 2 618 "int32" `411 
v L "bit" 2 618 "int8" `418 
f G "bit_set" 2 618 "void(int32 var,int8 bit)" `416 
v L "var" 2 619 "int8" `420 
v L "bit" 2 619 "int8" `421 
f B "bit_clear" 2 619 "void(int8 var,int8 bit)" `419 
v L "var" 2 620 "int16" `420 
v L "bit" 2 620 "int8" `424 
f G "bit_clear" 2 620 "void(int16 var,int8 bit)" `422 
v L "var" 2 621 "int32" `420 
v L "bit" 2 621 "int8" `427 
f G "bit_clear" 2 621 "void(int32 var,int8 bit)" `425 
v L "var" 2 622 "int8" `429 
v L "bit" 2 622 "int8" `430 
f B "bit_test" 2 622 "int8(int8 var,int8 bit)" `428 
v L "var" 2 623 "int16" `429 
v L "bit" 2 623 "int8" `433 
f G "bit_test" 2 623 "int8(int16 var,int8 bit)" `431 
v L "var" 2 624 "int32" `429 
v L "bit" 2 624 "int8" `436 
f G "bit_test" 2 624 "int8(int32 var,int8 bit)" `434 
v L "var" 2 625 "?" `411 
v L "bit" 2 625 "int8" `439 
f G "bit_set" 2 625 "void(? var,int8 bit)" `437 
v L "var" 2 626 "?" `411 
v L "bit" 2 626 "int8" `442 
f G "bit_set" 2 626 "void(? var,int8 bit)" `440 
v L "var" 2 627 "?" `420 
v L "bit" 2 627 "int8" `445 
f G "bit_clear" 2 627 "void(? var,int8 bit)" `443 
v L "var" 2 628 "?" `420 
v L "bit" 2 628 "int8" `448 
f G "bit_clear" 2 628 "void(? var,int8 bit)" `446 
v L "var" 2 629 "?" `429 
v L "bit" 2 629 "int8" `451 
f G "bit_test" 2 629 "int8(? var,int8 bit)" `449 
v L "var" 2 630 "?" `429 
v L "bit" 2 630 "int8" `454 
f G "bit_test" 2 630 "int8(? var,int8 bit)" `452 
v L "value" 2 631 "int8" `456 
v L "var" 2 631 "int16" `457 
f B "bit_first" 2 631 "int8(int8 value,int16 var)" `455 
v L "var" 2 632 "sint16" `459 
f B "bit_last" 2 632 "int8(sint16 var)" `458 
v L "value" 2 633 "int8" `461 
v L "var" 2 633 "sint16" `462 
f G "bit_last" 2 633 "int8(int8 value,sint16 var)" `460  "#use delay() Prototypes:"
v L "count" 2 636 "int16" `464 
f B "delay_cycles" 2 636 "void(int16 count)" `463 
v L "time" 2 637 "int16" `466 
f B "delay_ms" 2 637 "void(int16 time)" `465 
v L "time" 2 638 "int16" `468 
f B "delay_us" 2 638 "void(int16 time)" `467  "#use rs232() Prototypes:"
v L "cdata" 2 641 "sint8" `470 
f B "putchar" 2 641 "void(sint8 cdata)" `469 
v L "cdata" 2 642 "sint8" `472 
v L "stream" 2 642 "int8" `473 
f G "putchar" 2 642 "void(sint8 cdata,int8 stream)" `471 
v L "string" 2 643 "*sint8" `475 
f B "puts" 2 643 "void(*sint8 string)" `474 
v L "string" 2 644 "*sint8" `477 
v L "stream" 2 644 "int8" `478 
f G "puts" 2 644 "void(*sint8 string,int8 stream)" `476 
f B "getch" 2 645 "sint8()" `479 
v L "stream" 2 646 "int8" `481 
f G "getch" 2 646 "sint8(int8 stream)" `480 
v L "string" 2 647 "*sint8" `483 
f B "gets" 2 647 "void(*sint8 string)" `482 
v L "string" 2 648 "*sint8" `485 
v L "stream" 2 648 "int8" `486 
f G "gets" 2 648 "void(*sint8 string,int8 stream)" `484 
f B "kbhit" 2 649 "int8()" `487 
v L "stream" 2 650 "int8" `489 
f G "kbhit" 2 650 "int8(int8 stream)" `488 
v L "string" 2 651 "*sint8" `491 
f B "printf" 2 651 "void(*sint8 string,*int8 _VA_LIST)" `490 
v L "stream" 2 652 "int8" `494 
v L "string" 2 652 "*sint8" `495 
f B "fprintf" 2 652 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `493 
f B "putc_send" 2 653 "void()" `497 
v L "stream" 2 654 "int8" `499 
f B "fputc_send" 2 654 "void(int8 stream)" `498 
f B "rcv_buffer_full" 2 655 "int8()" `500 
v L "stream" 2 656 "int8" `502 
f G "rcv_buffer_full" 2 656 "int8(int8 stream)" `501 
f B "rcv_buffer_bytes" 2 657 "int16()" `503 
v L "stream" 2 658 "int8" `505 
f G "rcv_buffer_bytes" 2 658 "int16(int8 stream)" `504 
f B "tx_buffer_full" 2 659 "int8()" `506 
v L "stream" 2 660 "int8" `508 
f G "tx_buffer_full" 2 660 "int8(int8 stream)" `507 
f B "tx_buffer_bytes" 2 661 "int16()" `509 
v L "stream" 2 662 "int8" `511 
f G "tx_buffer_bytes" 2 662 "int16(int8 stream)" `510  "#use i2c() Prototypes:"
f B "i2c_read" 2 665 "int8()" `512 
v L "stream" 2 666 "int8" `514 
f G "i2c_read" 2 666 "int8(int8 stream)" `513 
v L "stream" 2 667 "int8" `516 
v L "ack" 2 667 "int8" `517 
f G "i2c_read" 2 667 "int8(int8 stream,int8 ack)" `515 
v L "data" 2 668 "int8" `519 
f B "i2c_write" 2 668 "int8(int8 data)" `518 
v L "stream" 2 669 "int8" `521 
v L "data" 2 669 "int8" `522 
f G "i2c_write" 2 669 "int8(int8 stream,int8 data)" `520 
f B "i2c_start" 2 670 "void()" `523 
v L "stream" 2 671 "int8" `525 
f G "i2c_start" 2 671 "void(int8 stream)" `524 
v L "stream" 2 672 "int8" `527 
v L "restart" 2 672 "int8" `528 
f G "i2c_start" 2 672 "void(int8 stream,int8 restart)" `526 
f B "i2c_stop" 2 673 "void()" `529 
v L "stream" 2 674 "int8" `531 
f G "i2c_stop" 2 674 "void(int8 stream)" `530 
f B "i2c_isr_state" 2 675 "sint8()" `532 
v L "addr" 2 676 "int8" `534 
f B "i2c_slaveaddr" 2 676 "void(int8 addr)" `533 
v L "stream" 2 677 "int8" `536 
v L "addr" 2 677 "int8" `537 
f G "i2c_slaveaddr" 2 677 "void(int8 stream,int8 addr)" `535 
f B "i2c_poll" 2 678 "int8()" `538 
v L "stream" 2 679 "int8" `540 
f G "i2c_poll" 2 679 "int8(int8 stream)" `539 
v L "baud" 2 680 "int32" `542 
f B "i2c_init" 2 680 "void(int32 baud)" `541 
v L "stream" 2 681 "int8" `544 
v L "baud" 2 681 "int32" `545 
f G "i2c_init" 2 681 "void(int8 stream,int32 baud)" `543  "#use spi() Prototypes:"
f B "spi_xfer" 2 684 "int8()" `546 
f G "spi_xfer" 2 685 "int16()" `547 
f G "spi_xfer" 2 686 "int32()" `548 
v L "data" 2 687 "int8" `550 
f G "spi_xfer" 2 687 "int8(int8 data)" `549 
v L "data" 2 688 "int16" `552 
f G "spi_xfer" 2 688 "int16(int16 data)" `551 
v L "data" 2 689 "int32" `554 
f G "spi_xfer" 2 689 "int32(int32 data)" `553 
v L "stream" 2 690 "int8" `556 
v L "data" 2 690 "int8" `557 
f G "spi_xfer" 2 690 "int8(int8 stream,int8 data)" `555 
v L "stream" 2 691 "int8" `556 
v L "data" 2 691 "int16" `560 
f G "spi_xfer" 2 691 "int16(int8 stream,int16 data)" `558 
v L "stream" 2 692 "int8" `556 
v L "data" 2 692 "int32" `563 
f G "spi_xfer" 2 692 "int32(int8 stream,int32 data)" `561 
v L "stream" 2 693 "int8" `565 
v L "data" 2 693 "int8" `566 
v L "bits" 2 693 "int8" `567 
f G "spi_xfer" 2 693 "int8(int8 stream,int8 data,int8 bits)" `564 
v L "stream" 2 694 "int8" `565 
v L "data" 2 694 "int16" `566 
v L "bits" 2 694 "int8" `571 
f G "spi_xfer" 2 694 "int16(int8 stream,int16 data,int8 bits)" `568 
v L "stream" 2 695 "int8" `565 
v L "data" 2 695 "int32" `566 
v L "bits" 2 695 "int8" `575 
f G "spi_xfer" 2 695 "int32(int8 stream,int32 data,int8 bits)" `572 
v L "baud" 2 696 "int32" `577 
f B "spi_init" 2 696 "void(int32 baud)" `576 
v L "stream" 2 697 "int8" `579 
v L "baud" 2 697 "int32" `580 
f G "spi_init" 2 697 "void(int8 stream,int32 baud)" `578 
v L "baud" 2 698 "int32" `582 
f B "spi_speed" 2 698 "void(int32 baud)" `581 
v L "stream" 2 699 "int8" `584 
v L "baud" 2 699 "int32" `585 
f G "spi_speed" 2 699 "void(int8 stream,int32 baud)" `583 
v L "stream" 2 700 "int8" `587 
v L "baud" 2 700 "int32" `588 
v L "clock" 2 700 "int32" `589 
f G "spi_speed" 2 700 "void(int8 stream,int32 baud,int32 clock)" `586 
v L "data" 2 701 "int8" `591 
f B "spi_prewrite" 2 701 "void(int8 data)" `590 
v L "data" 2 702 "int16" `593 
f G "spi_prewrite" 2 702 "void(int16 data)" `592 
v L "data" 2 703 "int32" `595 
f G "spi_prewrite" 2 703 "void(int32 data)" `594 
v L "??65535" 2 704 "int8" `597 
v L "data" 2 704 "int8" `598 
f G "spi_prewrite" 2 704 "void(int8 ,int8 data)" `596 
v L "??65535" 2 705 "int8" `597 
v L "data" 2 705 "int16" `601 
f G "spi_prewrite" 2 705 "void(int8 ,int16 data)" `599 
v L "??65535" 2 706 "int8" `597 
v L "data" 2 706 "int32" `604 
f G "spi_prewrite" 2 706 "void(int8 ,int32 data)" `602 
f B "spi_xfer_in" 2 707 "int8()" `605 
f G "spi_xfer_in" 2 708 "int16()" `606 
f G "spi_xfer_in" 2 709 "int32()" `607 
v L "bits" 2 710 "int8" `609 
f G "spi_xfer_in" 2 710 "int8(int8 bits)" `608 
v L "bits" 2 711 "int8" `611 
f G "spi_xfer_in" 2 711 "int16(int8 bits)" `610 
v L "bits" 2 712 "int8" `613 
f G "spi_xfer_in" 2 712 "int32(int8 bits)" `612 
v L "stream" 2 713 "int8" `615 
v L "bits" 2 713 "int8" `616 
f G "spi_xfer_in" 2 713 "int8(int8 stream,int8 bits)" `614 
v L "stream" 2 714 "int8" `615 
v L "bits" 2 714 "int8" `619 
f G "spi_xfer_in" 2 714 "int16(int8 stream,int8 bits)" `617 
v L "stream" 2 715 "int8" `615 
v L "bits" 2 715 "int8" `622 
f G "spi_xfer_in" 2 715 "int32(int8 stream,int8 bits)" `620  "#use rtos() Prototypes:"
f B "rtos_run" 2 718 "void()" `623 
f B "rtos_yield" 2 719 "void()" `624 
v L "task" 2 720 "int8" `626 
f B "rtos_enable" 2 720 "void(int8 task)" `625 
v L "task" 2 721 "int8" `628 
f B "rtos_disable" 2 721 "void(int8 task)" `627 
f B "rtos_terminate" 2 722 "void()" `629 
v L "flag" 2 723 "int8" `631 
f B "rtos_await" 2 723 "void(int8 flag)" `630 
v L "sem" 2 724 "int8" `633 
f B "rtos_wait" 2 724 "void(int8 sem)" `632 
v L "sem" 2 725 "int8" `635 
f B "rtos_signal" 2 725 "void(int8 sem)" `634 
v L "task" 2 726 "int8" `637 
v L "msg" 2 726 "int8" `638 
f B "rtos_msg_send" 2 726 "void(int8 task,int8 msg)" `636 
f B "rtos_msg_read" 2 727 "int8()" `639 
f B "rtos_msg_poll" 2 728 "int8()" `640 
v L "task" 2 729 "int8" `642 
f B "rtos_overrun" 2 729 "int8(int8 task)" `641 
v L "task" 2 730 "int8" `644 
v L "stat" 2 730 "*int8" `645 
f B "rtos_stats" 2 730 "void(int8 task,*int8 stat)" `643  "#use timer() Prototypes:"
f B "get_ticks" 2 733 "int8()" `646 
f G "get_ticks" 2 734 "int16()" `647 
f G "get_ticks" 2 735 "int32()" `648 
f G "get_ticks" 2 736 "?()" `649 
v L "stream" 2 737 "int8" `651 
f G "get_ticks" 2 737 "int8(int8 stream)" `650 
v L "stream" 2 738 "int8" `653 
f G "get_ticks" 2 738 "int16(int8 stream)" `652 
v L "stream" 2 739 "int8" `655 
f G "get_ticks" 2 739 "int32(int8 stream)" `654 
v L "stream" 2 740 "int8" `657 
f G "get_ticks" 2 740 "?(int8 stream)" `656 
v L "value" 2 741 "int8" `659 
f B "set_ticks" 2 741 "void(int8 value)" `658 
v L "value" 2 742 "int16" `661 
f G "set_ticks" 2 742 "void(int16 value)" `660 
v L "value" 2 743 "int32" `663 
f G "set_ticks" 2 743 "void(int32 value)" `662 
v L "value" 2 744 "?" `665 
f G "set_ticks" 2 744 "void(? value)" `664 
v L "stream" 2 745 "int8" `667 
v L "value" 2 745 "int8" `668 
f G "set_ticks" 2 745 "void(int8 stream,int8 value)" `666 
v L "stream" 2 746 "int8" `667 
v L "value" 2 746 "int16" `671 
f G "set_ticks" 2 746 "void(int8 stream,int16 value)" `669 
v L "stream" 2 747 "int8" `667 
v L "value" 2 747 "int32" `674 
f G "set_ticks" 2 747 "void(int8 stream,int32 value)" `672 
v L "stream" 2 748 "int8" `667 
v L "value" 2 748 "?" `677 
f G "set_ticks" 2 748 "void(int8 stream,? value)" `675  "#use pwm() Prototypes:"
f B "pwm_on" 2 751 "void()" `678 
v L "stream" 2 752 "int8" `680 
f G "pwm_on" 2 752 "void(int8 stream)" `679 
f B "pwm_off" 2 753 "void()" `681 
v L "stream" 2 754 "int8" `683 
f G "pwm_off" 2 754 "void(int8 stream)" `682 
v L "duty" 2 755 "int16" `685 
f B "pwm_set_duty" 2 755 "void(int16 duty)" `684 
v L "stream" 2 756 "int8" `687 
v L "duty" 2 756 "int16" `688 
f G "pwm_set_duty" 2 756 "void(int8 stream,int16 duty)" `686 
v L "percent" 2 757 "int16" `690 
f B "pwm_set_duty_percent" 2 757 "void(int16 percent)" `689 
v L "stream" 2 758 "int8" `692 
v L "percent" 2 758 "int16" `693 
f G "pwm_set_duty_percent" 2 758 "void(int8 stream,int16 percent)" `691 
v L "frequency" 2 759 "int32" `695 
f B "pwm_set_frequency" 2 759 "void(int32 frequency)" `694 
v L "stream" 2 760 "int8" `697 
v L "frequency" 2 760 "int32" `698 
f G "pwm_set_frequency" 2 760 "void(int8 stream,int32 frequency)" `696  "#use capture() Prototypes:"
f B "get_capture_time" 2 763 "int16()" `699 
v L "stream" 2 764 "int8" `701 
f G "get_capture_time" 2 764 "int16(int8 stream)" `700 
f B "get_capture_event" 2 765 "int8()" `702 
v L "stream" 2 766 "int8" `704 
f G "get_capture_event" 2 766 "int8(int8 stream)" `703  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 775 "int16" `706 
f B "goto_address" 2 775 "void(int16 address)" `705 
v L "label" 2 776 "int16" `708 
f B "label_address" 2 776 "int16(int16 label)" `707  "Program Memory Prototypes:"
v L "address" 2 779 "int16" `710 
v L "dataptr" 2 779 "*int8" `711 
v L "count" 2 779 "int16" `712 
f B "read_program_memory" 2 779 "void(int16 address,*int8 dataptr,int16 count)" `709 
v L "address" 2 780 "int16" `714 
f B "erase_program_memory" 2 780 "void(int16 address)" `713 
v L "address" 2 781 "int16" `716 
v L "dataptr" 2 781 "*int8" `717 
v L "count" 2 781 "int16" `718 
f B "write_program_memory" 2 781 "void(int16 address,*int8 dataptr,int16 count)" `715 
v L "dataptr" 2 782 "*int8" `720 
v L "count" 2 782 "int8" `721 
f B "read_configuration_memory" 2 782 "void(*int8 dataptr,int8 count)" `719 
v L "dataptr" 2 783 "*int8" `723 
v L "count" 2 783 "int8" `724 
f B "write_configuration_memory" 2 783 "void(*int8 dataptr,int8 count)" `722  "INT"
c L "write_configuration_memory" 2 1 4 "FUNCTION"
v L "interrupt" 2 790 "int16" `726 
f B "enable_interrupts" 2 790 "void(int16 interrupt)" `725 
v L "interrupt" 2 791 "int16" `728 
f B "disable_interrupts" 2 791 "void(int16 interrupt)" `727 
v L "interrupt" 2 792 "int16" `730 
f B "clear_interrupt" 2 792 "void(int16 interrupt)" `729 
v L "interrupt" 2 793 "int16" `732 
f B "interrupt_active" 2 793 "int8(int16 interrupt)" `731 
v L "interrupt" 2 794 "int16" `734 
f B "interrupt_enabled" 2 794 "int8(int16 interrupt)" `733 
v L "source" 2 795 "int8" `736 
v L "edge" 2 795 "int8" `737 
f B "ext_int_edge" 2 795 "void(int8 source,int8 edge)" `735 
v L "address" 2 796 "int16" `739 
f B "jump_to_isr" 2 796 "void(int16 address)" `738  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 798 "0x40"
d G "H_TO_L" 2 799 "0"
d G "INTR_GLOBAL" 2 802 "0x400"
d G "GLOBAL" 2 803 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 804 "0x100	"
d G "INTR_ALTERNATE" 2 805 "0x200"
d G "INTR_LEVEL0" 2 806 "0x500"
d G "INTR_LEVEL1" 2 807 "0x501"
d G "INTR_LEVEL2" 2 808 "0x502"
d G "INTR_LEVEL3" 2 809 "0x503"
d G "INTR_LEVEL4" 2 810 "0x504"
d G "INTR_LEVEL5" 2 811 "0x505"
d G "INTR_LEVEL6" 2 812 "0x506"
d G "INTR_LEVEL7" 2 813 "0x507"
d G "INTR_CN_PIN" 2 815 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 2 817 "1"
d G "INT_ADDRERR" 2 818 "2"
d G "INT_STACKERR" 2 819 "3"
d G "INT_MATHERR" 2 820 "4"
d G "INT_EXT0" 2 821 "6"
d G "INT_IC1" 2 822 "7"
d G "INT_OC1" 2 823 "8"
d G "INT_TIMER1" 2 824 "9"
d G "INT_IC2" 2 825 "70"
d G "INT_OC2" 2 826 "71"
d G "INT_TIMER2" 2 827 "72"
d G "INT_TIMER3" 2 828 "73"
d G "INT_SPI1E" 2 829 "74"
d G "INT_SPI1" 2 830 "75"
d G "INT_RDA" 2 831 "76"
d G "INT_TBE" 2 832 "77"
d G "INT_ADC1" 2 833 "78"
d G "INT_SI2C" 2 834 "81"
d G "INT_MI2C" 2 835 "82"
d G "INT_CNI" 2 836 "84"
d G "INT_EXT1" 2 837 "85"
d G "INT_OC3" 2 838 "90"
d G "INT_OC4" 2 839 "91"
d G "INT_TIMER4" 2 840 "92"
d G "INT_TIMER5" 2 841 "93"
d G "INT_EXT2" 2 842 "94"
d G "INT_RDA2" 2 843 "95"
d G "INT_TBE2" 2 844 "96"
d G "INT_SPI2E" 2 845 "97"
d G "INT_SPI2" 2 846 "98"
d G "INT_IC3" 2 847 "102"
d G "INT_IC4" 2 848 "103"
d G "INT_IC5" 2 849 "104"
d G "INT_OC5" 2 850 "106"
d G "INT_SI2C2" 2 851 "114"
d G "INT_MI2C2" 2 852 "115"
d G "INT_UART1E" 2 853 "130"
d G "INT_UART2E" 2 854 "131"
d G "INT_COMP" 2 855 "152"
d G "INT_PMP" 2 856 "164"
d G "INT_RTC" 2 857 "173"
d G "INT_CRC" 2 858 "174"
d G "INT_LVD" 2 859 "179"
C L "jump_to_isr" 1 11 2 "FUNCTION"
C L "jump_to_isr" 1 15 1 "*"
C L "jump_to_isr" 1 15 1 "*"
C L "jump_to_isr" 1 15 2 "*"
C L "jump_to_isr" 1 22 1 "*"
C L "jump_to_isr" 1 22 1 "*"
D G "DIS_ISR" 1 46 "() disable_interrupts(GLOBAL)"
D G "ENB_ISR" 1 47 "() enable_interrupts(GLOBAL)"
D G "ENTER_CRITICAL" 1 48 "(code) {DIS_ISR(); code; ENB_ISR();}"
D G "DI_TMR1" 1 51 "() disable_interrupts(INT_TIMER1)"
D G "EI_TMR1" 1 52 "() enable_interrupts(INT_TIMER1)"
D G "DI_RXD1" 1 55 "() disable_interrupts(INT_RDA)"
D G "EI_RXD1" 1 56 "() enable_interrupts(INT_RDA)"
C L "jump_to_isr" 1 22 2 "FUNCTION"
C L "jump_to_isr" 1 63 3 "*"
C L "jump_to_isr" 1 77 1 "*"
C L "jump_to_isr" 1 77 1 "*"
D G "LED0" 1 93 "PIN_A2"
D G "LED1" 1 94 "PIN_A4"
D G "LED2" 1 95 "PIN_B2"
D G "LED3" 1 96 "PIN_B3"
D G "LED0_On" 1 102 "() output_low(LED0)"
D G "LED1_On" 1 103 "() output_low(LED1)"
D G "LED2_On" 1 104 "() output_low(LED2)"
D G "LED3_On" 1 105 "() output_low(LED3)"
D G "LED0_Off" 1 107 "() output_high(LED0)"
D G "LED1_Off" 1 108 "() output_high(LED1)"
D G "LED2_Off" 1 109 "() output_high(LED2)"
D G "LED3_Off" 1 110 "() output_high(LED3)"
D G "LED0_Inv" 1 112 "() output_toggle(LED0)"
D G "LED1_Inv" 1 113 "() output_toggle(LED1)"
D G "LED2_Inv" 1 114 "() output_toggle(LED2)"
D G "LED3_Inv" 1 115 "() output_toggle(LED3)"
C L "jump_to_isr" 1 77 1 "FUNCTION"
V L "d" 1 118 "int8" `751 
F G "LED_Write" 1 118 "void(int8 d)" `750 
C L "LED_Write" 1 77 1 "FUNCTION"
C L "LED_Write" 1 77 1 "FUNCTION"
C L "LED_Write" 1 77 1 "FUNCTION"
C L "LED_Write" 1 77 1 "FUNCTION"
C L "LED_Read" 1 77 1 "FUNCTION"
F G "LED_Read" 1 127 "int8()" `752 
C L "LED_Put" 1 77 1 "FUNCTION"
C L "LED_Put" 1 77 1 "FUNCTION"
V L "id" 1 133 "int8" `754 
C L "LED_Put" 1 77 1 "FUNCTION"
V L "d" 1 133 "int8" `755 
F G "LED_Put" 1 133 "void(int8 id,int8 d)" `753 
C L "LED_Set" 1 77 1 "FUNCTION"
V L "id" 1 144 "int8" `757 
F G "LED_Set" 1 144 "void(int8 id)" `756 
C L "LED_Clr" 1 77 1 "FUNCTION"
V L "id" 1 149 "int8" `759 
F G "LED_Clr" 1 149 "void(int8 id)" `758 
C L "LED_Get" 1 77 1 "FUNCTION"
C L "LED_Get" 1 153 1 "*"
C L "LED_Get" 1 153 1 "*"
V L "id" 1 157 "int8" `761 
F G "LED_Get" 1 157 "int8(int8 id)" `760 
C L "LED_Inv" 1 153 1 "FUNCTION"
V L "id" 1 167 "int8" `763 
F G "LED_Inv" 1 167 "void(int8 id)" `762 
D G "PSW0" 1 175 "PIN_B4"
D G "PSW1" 1 176 "PIN_B5"
D G "PSW2" 1 177 "PIN_B6"
D G "PSW3" 1 178 "PIN_B7"
D G "PSW0_Chk" 1 181 "() !input(PSW0)"
D G "PSW1_Chk" 1 182 "() !input(PSW1)"
D G "PSW2_Chk" 1 183 "() !input(PSW2)"
D G "PSW3_Chk" 1 184 "() !input(PSW3)"
C L "PSW_Get" 1 153 1 "FUNCTION"
C L "PSW_Get" 1 186 1 "*"
V L "id" 1 189 "int16" `765 
F G "PSW_Get" 1 189 "int8(int16 id)" `764 
C L "PSW_Read" 1 186 1 "FUNCTION"
F G "PSW_Read" 1 199 "int8()" `766 
C L "PSW_Scan" 1 186 1 "FUNCTION"
C L "PSW_Scan" 1 203 1 "*"
C L "PSW_Scan" 1 203 1 "*"
F G "PSW_Scan" 1 207 "int8()" `767 
V L "d" 1 208 "sint16" `768 
V L "i" 1 209 "sint16" `769 
C L "PSW_Scan" 1 203 1 "FUNCTION"
C L "PSW_Scan" 1 203 1 "FUNCTION"
V G "_sw_active" 1 220 "int1" `770 
V G "_sw_on_id" 1 221 "int8" `771 
V G "_sw_state" 1 222 "int8" `772 
V G "_sw_ticks" 1 223 "int8" `773 
C L "Switch_Service" 1 203 1 "FUNCTION"
F G "Switch_Service" 1 225 "void()" `774 
D G "PSW_REP_MAX" 1 226 "50" "50*10ms = 500mS"
V L "hold_cnt" 1 227 "int8" `775 
V L "prv_id" 1 228 "int8" `776 
V L "rep_ticks" 1 229 "int8" `777 
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
V L "d" 1 233 "int8" `778 
V L "cur_id" 1 234 "int8" `779 
V L "i" 1 235 "sint16" `780 
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "Switch_Service" 1 203 1 "FUNCTION"
C L "PSW_Check" 1 203 3 "FUNCTION"
F G "PSW_Check" 1 296 "int8()" `781 
C L "PSW_GetId" 1 203 4 "FUNCTION"
C L "PSW_GetId" 1 307 1 "*"
F G "PSW_GetId" 1 309 "int8()" `782 
V L "ret" 1 310 "int8" `783 
D G "BUZZ" 1 320 "PIN_B11"
V G "_beep_tone" 1 322 "int8" `784 
V G "_beep_power" 1 323 "int8" `785 
V G "_beep_period" 1 324 "int16" `786 
V G "_beep_ticks" 1 325 "int16" `787 
V G "_beep_playing" 1 326 "int1" `788 
V G "_beep_updated" 1 327 "int1" `789 
V G "_beep_tmrval" 1 329 "int16" `790 
V G "_beep_pwmval" 1 330 "int16" `791 
C L "Beep_Service" 1 307 1 "FUNCTION"
F G "Beep_Service" 1 333 "void()" `792 
F G "Beep_Update" 1 345 "void()" `793 
C L "Beep_Update" 1 307 1 "FUNCTION"
C L "Beep_Update" 1 307 1 "FUNCTION"
V L "tone" 1 351 "int8" `795 
F G "Beep_SetTone" 1 351 "void(int8 tone)" `794 
V L "power" 1 356 "int8" `797 
F G "Beep_SetPower" 1 356 "void(int8 power)" `796 
V L "period" 1 361 "int16" `799 
F G "Beep_SetPeriod" 1 361 "void(int16 period)" `798 
V L "tone" 1 366 "int8" `801 
V L "power" 1 366 "int8" `802 
V L "period" 1 366 "int16" `803 
F G "Beep_Setup" 1 366 "void(int8 tone,int8 power,int16 period)" `800 
F G "Beep_Start" 1 373 "void()" `804  "Be sure beep parameters are update on the first call *"
C L "Beep_Start" 1 307 2 "FUNCTION"
C L "Beep_Start" 1 307 2 "FUNCTION"
C L "Beep_Start" 1 307 1 "FUNCTION"
C L "Beep_Start" 1 307 1 "FUNCTION"
F G "Beep_Stop" 1 401 "void()" `805 
F G "Beep" 1 406 "void()" `806 
V L "tone" 1 410 "int8" `808 
V L "power" 1 410 "int8" `809 
V L "period" 1 410 "int16" `810 
F G "Sound" 1 410 "void(int8 tone,int8 power,int16 period)" `807 
D G "ADC_NUM_CHANNELS" 1 419 "4"
V G "_adc_value" 1 420 "sint16[4]" `811 
V G "_ach_ch_idx" 1 421 "sint16" `812 
F G "ADC_Service" 1 423 "void()" `813 
V L "ch" 1 429 "int8" `815 
F G "ADC_Read" 1 429 "sint16(int8 ch)" `814 
C G "" 3 1 1 "*"
C G "" 3 1 1 "*"
C G "" 3 1 1 "*"
D G "BL_SUPPORT_H" 3 9 ""
D G "LOADER_PAGES" 3 16 "3"
D G "ERASE_SIZE" 3 17 "2048" "2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word"
D G "LOADER_SIZE" 3 19 " ((LOADER_PAGES * (ERASE_SIZE/2)) - 1)" "2 bytes per address, so divided by 2, 2048/2 = 1024"
D G "LOADER_END" 3 20 "LOADER_SIZE" "End address"
D G "LOADER_ADDR" 3 21 "0xC00" "(LOADER_END - LOADER_SIZE)       /* Start address    */"
D G "_STDIO" 4 12 ""
D G "_STRING" 5 12 ""
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "memmove" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `817 
V L "s2" 5 34 "*sint8" `818 
V L "n" 5 34 "int16" `819 
F G "memmove" 5 35 "*sint8(*int8 s1,*sint8 s2,int16 n)" `816 
V L "sc1" 5 36 "*sint8" `820 
V L "sc2" 5 37 "*sint8" `821 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
V L "s1" 5 61 "*sint8" `823 
V L "s2" 5 61 "*sint8" `824 
V L "n" 5 61 "int16" `825 
F G "strncpy" 5 62 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `822 
V L "s" 5 63 "*sint8" `826 
C L "strcat" 5 19 3 "FUNCTION"
V L "s1" 5 78 "*sint8" `828 
V L "s2" 5 78 "*sint8" `829 
F G "strcat" 5 79 "*sint8(*sint8 s1,*sint8 s2)" `827 
V L "s" 5 80 "*sint8" `830 
C L "strncat" 5 19 2 "FUNCTION"
V L "s1" 5 96 "*sint8" `832 
V L "s2" 5 96 "*sint8" `833 
V L "n" 5 96 "int16" `834 
F G "strncat" 5 97 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `831 
V L "s" 5 98 "*sint8" `835 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `837 
V L "s2" 5 120 "*sint8" `838 
V L "n" 5 120 "int16" `839 
F G "memcmp" 5 121 "sint8(*int8 s1,*sint8 s2,int16 n)" `836 
V L "su1" 5 122 "*sint8" `840 
V L "su2" 5 122 "*sint8" `841 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*sint8" `843 
V L "s2" 5 134 "*sint8" `844 
F G "strcmp" 5 135 "sint8(*sint8 s1,*sint8 s2)" `842 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*sint8" `846 
V L "s2" 5 144 "*sint8" `847 
F G "strcoll" 5 145 "sint8(*sint8 s1,*sint8 s2)" `845 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*sint8" `849 
V L "s2" 5 157 "*sint8" `850 
V L "n" 5 157 "int16" `851 
F G "strncmp" 5 158 "sint8(*sint8 s1,*sint8 s2,int16 n)" `848 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*sint8" `853 
V L "s2" 5 169 "*sint8" `854 
V L "n" 5 169 "int16" `855 
F G "strxfrm" 5 170 "int16(*sint8 s1,*sint8 s2,int16 n)" `852 
V L "s" 5 171 "*sint8" `856 
V L "n1" 5 172 "int8" `857 
C L "memchr" 5 19 3 "FUNCTION"
V L "s" 5 191 "*int8" `859 
V L "c" 5 191 "int8" `860 
V L "n" 5 191 "int16" `861 
F G "memchr" 5 192 "*sint8(*int8 s,int8 c,int16 n)" `858 
V L "uc" 5 193 "sint8" `862 
V L "su" 5 194 "*sint8" `863 
C L "strchr" 5 19 2 "FUNCTION"
V L "s" 5 205 "*sint8" `865 
V L "c" 5 205 "int8" `866 
F G "strchr" 5 206 "*sint8(*sint8 s,int8 c)" `864 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*sint8" `868 
V L "s2" 5 217 "*sint8" `869 
F G "strcspn" 5 218 "int8(*sint8 s1,*sint8 s2)" `867 
V L "sc1" 5 219 "*sint8" `870 
V L "sc2" 5 219 "*sint8" `871 
C L "strpbrk" 5 19 4 "FUNCTION"
V L "s1" 5 232 "*sint8" `873 
V L "s2" 5 232 "*sint8" `874 
F G "strpbrk" 5 233 "*sint8(*sint8 s1,*sint8 s2)" `872 
V L "sc1" 5 234 "*sint8" `875 
V L "sc2" 5 234 "*sint8" `876 
C L "strrchr" 5 19 2 "FUNCTION"
V L "s" 5 247 "*sint8" `878 
V L "c" 5 247 "int8" `879 
F G "strrchr" 5 248 "*sint8(*sint8 s,int8 c)" `877 
V L "p" 5 249 "*sint8" `880 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*sint8" `882 
V L "s2" 5 262 "*sint8" `883 
F G "strspn" 5 263 "int8(*sint8 s1,*sint8 s2)" `881 
V L "sc1" 5 264 "*sint8" `884 
V L "sc2" 5 264 "*sint8" `885 
C L "strstr" 5 19 6 "FUNCTION"
V L "s1" 5 281 "*sint8" `887 
V L "s2" 5 281 "*sint8" `888 
F G "strstr" 5 282 "*sint8(*sint8 s1,*sint8 s2)" `886 
V L "s" 5 283 "*sint8" `889 
V L "t" 5 283 "*sint8" `890 
C L "strtok" 5 19 13 "FUNCTION"
V L "s1" 5 320 "*sint8" `892 
V L "s2" 5 320 "*sint8" `893 
F G "strtok" 5 321 "*sint8(*sint8 s1,*sint8 s2)" `891 
V L "beg" 5 322 "*sint8" `894 
V L "end" 5 322 "*sint8" `895 
V L "save" 5 323 "*sint8" `896 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*sint8" `898 
F G "strlen" 5 370 "int8(*sint8 s)" `897 
V L "sc" 5 371 "*sint8" `899 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*sint8" `901 
V L "s2" 5 380 "*sint8" `902 
F G "stricmp" 5 381 "sint8(*sint8 s1,*sint8 s2)" `900 
C L "strlwr" 5 19 3 "FUNCTION"
V L "s" 5 394 "*sint8" `906 
F G "strlwr" 5 395 "*sint8(*sint8 s)" `905 
V L "p" 5 396 "*sint8" `907 
C L "strupr" 5 19 3 "FUNCTION"
V L "s" 5 408 "*sint8" `909 
F G "strupr" 5 409 "*sint8(*sint8 s)" `908 
V L "p" 5 410 "*sint8" `910 
D G "_STDLIB" 8 12 ""
D G "RAND_MAX" 8 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 8 25 "1"
T G "div_t" 8 33 "{sint16 quot,sint16 rem}" `914 
T G "ldiv_t" 8 38 "{sint32 quot,sint32 rem}" `918  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 6 3 6 "FUNCTION"
C L "atoi" 8 43 2 "FUNCTION"
C L "atoi" 8 46 1 "*"
C L "atoi" 8 46 1 "*"
V L "s" 8 50 "*sint8" `920 
f G "atoi" 8 50 "sint16(*sint8 s)" `919  "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 8 56 "(s) atol(s)"
C L "atoi" 8 46 5 "FUNCTION"
V L "s" 8 68 "*sint8" `922 
f G "atoi48" 8 68 "?(*sint8 s)" `921  "Syntax: signed int64  atoi64(char * s)"
C L "atoi48" 8 46 2 "FUNCTION"
V L "s" 8 73 "*sint8" `924 
f G "atoi64" 8 73 "?(*sint8 s)" `923  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi64" 8 46 2 "FUNCTION"
V L "num" 8 79 "sint32" `926 
V L "base" 8 79 "int16" `927 
V L "s" 8 79 "*sint8" `928 
f G "itoa" 8 79 "*sint8(sint32 num,int16 base,*sint8 s)" `925  "Standard template: signed int16  atol(char * s)"
C L "itoa" 8 81 1 "*"
C L "itoa" 8 81 1 "*"
V L "s" 8 85 "*sint8" `930 
f G "atol" 8 85 "sint32(*sint8 s)" `929  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 8 87 1 "*"
C L "atol" 8 87 1 "*"
C L "atol" 8 87 1 "*"
C L "atol" 8 87 1 "*"
V L "s" 8 93 "*sint8" `932 
V L "endptr" 8 93 "*sint8" `933 
V L "base" 8 93 "sint16" `934 
f G "strtol" 8 93 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `931  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 8 95 1 "*"
C L "strtol" 8 95 1 "*"
C L "strtol" 8 95 1 "*"
C L "strtol" 8 95 1 "*"
V L "s" 8 101 "*sint8" `936 
V L "endptr" 8 101 "*sint8" `937 
V L "base" 8 101 "sint16" `938 
f G "strtoul" 8 101 "int32(*sint8 s,*sint8 endptr,sint16 base)" `935  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 8 95 2 "FUNCTION"
C L "strtoul" 8 103 1 "*"
C L "strtoul" 8 103 1 "*"
C L "strtoul" 8 103 1 "*"
V L "s" 8 110 "*sint8" `940 
V L "endptr" 8 110 "*sint8" `941 
f G "strtof" 8 110 "float(*sint8 s,*sint8 endptr)" `939 
V L "s" 8 112 "*sint8" `943 
V L "endptr" 8 112 "*sint8" `944 
f G "strtof48" 8 112 "?(*sint8 s,*sint8 endptr)" `942 
V L "s" 8 113 "*sint8" `946 
V L "endptr" 8 113 "*sint8" `947 
f G "strtod" 8 113 "?(*sint8 s,*sint8 endptr)" `945  "Standard template: float32 atof(char * s)"
C L "strtod" 8 120 1 "*"
D G "atof" 8 124 "(s)   strtof(s, 0)"
C L "strtod" 8 120 3 "FUNCTION"
C L "strtod" 8 130 1 "*"
D G "atof48" 8 134 "(s) strtof48(s, 0)"
C L "strtod" 8 130 1 "FUNCTION"
C L "strtod" 8 136 1 "*"
D G "atof64" 8 140 "(s) strtod(s, 0)"
C L "strtod" 8 136 1 "FUNCTION"
C L "strtod" 8 143 1 "*"
C L "strtod" 8 143 1 "*"
C L "strtod" 8 143 1 "*"
V L "s" 8 153 "*sint8" `949 
f G "atoe" 8 153 "float(*sint8 s)" `948  "Pseudo-random sequence generation functions"
C L "atoe" 8 143 1 "FUNCTION"
C L "atoe" 8 160 1 "*"
C L "atoe" 8 160 1 "*"
C L "atoe" 8 160 1 "*"
C L "atoe" 8 160 1 "*"
C L "atoe" 8 160 1 "*"
f G "rand" 8 169 "int16()" `950  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
C L "rand" 8 171 1 "*"
V L "seed" 8 191 "int32" `952 
f G "srand" 8 191 "void(int32 seed)" `951  "Memory management functions"
C L "srand" 8 171 3 "FUNCTION"
V L "string" 8 205 "*sint8" `954 
f G "system" 8 205 "sint8(*sint8 string)" `953  "Searching and sorting utilities"
C L "system" 8 171 1 "FUNCTION"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 1 "*"
C L "system" 8 211 4 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
C L "system" 8 229 1 "*"
D G "labs" 8 249 "abs"
V L "numer" 8 251 "sint16" `956 
V L "denom" 8 251 "sint16" `957 
f G "div" 8 251 "div_t(sint16 numer,sint16 denom)" `955 
V L "numer" 8 252 "sint32" `959 
V L "denom" 8 252 "sint32" `960 
f G "ldiv" 8 252 "ldiv_t(sint32 numer,sint32 denom)" `958  "Multibyte character functions"
C L "ldiv" 8 229 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
V L "numer" 8 274 "sint16" `956 
V L "denom" 8 274 "sint16" `963 
F G "div" 8 275 "div_t(sint16 numer,sint16 denom)" `955 
V L "val" 8 276 "div_t" `961 
V L "numer" 8 282 "sint32" `959 
V L "denom" 8 282 "sint32" `964 
F G "ldiv" 8 283 "ldiv_t(sint32 numer,sint32 denom)" `958 
V L "val" 8 284 "ldiv_t" `962 
V L "s" 8 292 "*sint8" `970 
F G "atoe" 8 293 "float(*sint8 s)" `948 
V L "pow10" 8 294 "float" `969 
V L "result" 8 295 "float" `970 
V L "sign" 8 296 "int8" `971 
V L "expsign" 8 297 "int8" `972 
V L "c" 8 298 "sint8" `973 
V L "ptr" 8 299 "int8" `974 
V L "i" 8 300 "int8" `975 
V L "exp" 8 301 "float" `976 
V L "expcnt" 8 302 "int8" `977 
C L "atoe" 8 328 1 "FUNCTION"
V L "s" 8 429 "*sint8" `990 
F G "atoi" 8 430 "sint16(*sint8 s)" `919 
V L "result" 8 431 "sint16" `989 
V L "sign" 8 432 "int16" `990 
V L "base" 8 432 "int16" `991 
V L "index" 8 432 "int16" `992 
V L "c" 8 433 "sint8" `993 
C L "atoi" 8 328 1 "FUNCTION"
C L "atoi" 8 328 1 "FUNCTION"
C L "atoi" 8 328 1 "FUNCTION"
C L "atoi" 8 328 1 "FUNCTION"
C L "atoi" 8 328 1 "FUNCTION"
C L "atoi" 8 328 1 "FUNCTION"
V L "s" 8 498 "*sint8" `995 
F G "atol" 8 499 "sint32(*sint8 s)" `929 
V L "result" 8 500 "sint32" `994 
V L "sign" 8 501 "int16" `995 
V L "base" 8 501 "int16" `996 
V L "index" 8 501 "int16" `997 
V L "c" 8 502 "sint8" `998 
C L "atol" 8 328 1 "FUNCTION"
C L "atol" 8 328 1 "FUNCTION"
C L "atol" 8 328 1 "FUNCTION"
C L "atol" 8 328 1 "FUNCTION"
C L "mult_with10" 8 328 1 "FUNCTION"
V L "num" 8 565 "sint32" `1000 
F G "mult_with10" 8 566 "sint32(sint32 num)" `999 
V L "s" 8 639 "*sint8" `1002 
F G "atoi48" 8 640 "?(*sint8 s)" `921 
V L "result" 8 641 "?" `1001 
V L "sign" 8 642 "sint8" `1002 
V L "base" 8 642 "sint8" `1003 
V L "index" 8 642 "sint8" `1004 
V L "c" 8 643 "sint8" `1005 
C L "atoi48" 8 328 1 "FUNCTION"
C L "atoi48" 8 328 1 "FUNCTION"
C L "atoi48" 8 328 1 "FUNCTION"
C L "atoi48" 8 328 1 "FUNCTION"
C L "atoi48" 8 328 1 "FUNCTION"
V L "s" 8 704 "*sint8" `1007 
F G "atoi64" 8 705 "?(*sint8 s)" `923 
V L "result" 8 706 "?" `1006 
V L "sign" 8 707 "sint8" `1007 
V L "base" 8 707 "sint8" `1008 
V L "index" 8 707 "sint8" `1009 
V L "c" 8 708 "sint8" `1010 
C L "atoi64" 8 328 1 "FUNCTION"
C L "atoi64" 8 328 1 "FUNCTION"
C L "atoi64" 8 328 1 "FUNCTION"
C L "atoi64" 8 328 1 "FUNCTION"
C L "atoi64" 8 328 1 "FUNCTION"
V L "num" 8 770 "sint32" `926 
V L "base" 8 770 "int16" `927 
V L "s" 8 770 "*sint8" `1014 
F G "itoa" 8 771 "*sint8(sint32 num,int16 base,*sint8 s)" `925 
V L "temp" 8 772 "int32" `1011 
V L "i" 8 773 "int8" `1012 
V L "sign" 8 773 "int8" `1013 
V L "cnt" 8 773 "int8" `1014 
V L "c" 8 774 "sint8" `1015 
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
V L "num" 8 809 "?" `1017 
V L "base" 8 809 "int16" `1018 
V L "s" 8 809 "*sint8" `1019 
F G "itoa" 8 810 "*sint8(? num,int16 base,*sint8 s)" `1016 
V L "temp" 8 811 "?" `1020 
V L "i" 8 812 "int8" `1021 
V L "sign" 8 812 "int8" `1022 
V L "cnt" 8 812 "int8" `1023 
V L "c" 8 813 "sint8" `1024 
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
V L "num" 8 846 "?" `1032 
V L "base" 8 846 "int16" `1033 
V L "s" 8 846 "*sint8" `1034 
F G "itoa" 8 847 "*sint8(? num,int16 base,*sint8 s)" `1031 
V L "temp" 8 848 "?" `1035 
V L "i" 8 849 "int8" `1036 
V L "sign" 8 849 "int8" `1037 
V L "cnt" 8 849 "int8" `1038 
V L "c" 8 850 "sint8" `1039 
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
C L "itoa" 8 328 1 "FUNCTION"
V L "s" 8 885 "*sint8" `940 
V L "endptr" 8 885 "*sint8" `1048 
F G "strtof" 8 886 "float(*sint8 s,*sint8 endptr)" `939 
V L "pow10" 8 887 "float" `1046 
V L "result" 8 888 "float" `1047 
V L "skip" 8 889 "int1" `1048 
V L "sign" 8 889 "int1" `1049 
V L "point" 8 889 "int1" `1050 
V L "c" 8 890 "sint8" `1051 
V L "ptr" 8 891 "int8" `1052 
V L "s" 8 958 "*sint8" `943 
V L "endptr" 8 958 "*sint8" `1056 
F G "strtof48" 8 959 "?(*sint8 s,*sint8 endptr)" `942 
V L "pow10" 8 960 "?" `1054 
V L "result" 8 961 "?" `1055 
V L "skip" 8 962 "int1" `1056 
V L "sign" 8 962 "int1" `1057 
V L "point" 8 962 "int1" `1058 
V L "c" 8 963 "sint8" `1059 
V L "ptr" 8 964 "int8" `1060 
V L "s" 8 1030 "*sint8" `946 
V L "endptr" 8 1030 "*sint8" `1075 
F G "strtod" 8 1031 "?(*sint8 s,*sint8 endptr)" `945 
V L "pow10" 8 1032 "?" `1073 
V L "result" 8 1033 "?" `1074 
V L "skip" 8 1034 "int1" `1075 
V L "sign" 8 1034 "int1" `1076 
V L "point" 8 1034 "int1" `1077 
V L "c" 8 1035 "sint8" `1078 
V L "ptr" 8 1036 "int8" `1079 
V L "s" 8 1103 "*sint8" `936 
V L "endptr" 8 1103 "*sint8" `937 
V L "base" 8 1103 "sint16" `1095 
F G "strtoul" 8 1104 "int32(*sint8 s,*sint8 endptr,sint16 base)" `935 
V L "sc" 8 1105 "*sint8" `1092 
V L "s1" 8 1105 "*sint8" `1093 
V L "sd" 8 1105 "*sint8" `1094 
V L "x" 8 1106 "int32" `1095 
V L "sign" 8 1107 "sint8" `1096 
V L "digits" 8 1108 "sint8[1]" `1097 
C L "strtoul" 8 328 1 "FUNCTION"
C L "strtoul" 8 328 1 "FUNCTION"
C L "strtoul" 8 328 1 "FUNCTION"
V L "s" 8 1165 "*sint8" `932 
V L "endptr" 8 1165 "*sint8" `933 
V L "base" 8 1165 "sint16" `1102 
F G "strtol" 8 1166 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `931 
V L "sc" 8 1167 "*sint8" `1099 
V L "s1" 8 1167 "*sint8" `1100 
V L "sd" 8 1167 "*sint8" `1101 
V L "x" 8 1168 "sint32" `1102 
V L "sign" 8 1169 "sint8" `1103 
V L "digits" 8 1170 "sint8[1]" `1104 
C L "strtol" 8 328 1 "FUNCTION"
C L "strtol" 8 328 1 "FUNCTION"
C L "strtol" 8 328 1 "FUNCTION"
V L "string" 8 1228 "*sint8" `1107 
F G "system" 8 1229 "sint8(*sint8 string)" `953 
V L "s" 8 1233 "*sint8" `1107 
V L "n" 8 1233 "int16" `1108 
F G "mblen" 8 1234 "sint8(*sint8 s,int16 n)" `1106 
V L "pwc" 8 1238 "*sint8" `1110 
V L "s" 8 1238 "*sint8" `1111 
V L "n" 8 1238 "int16" `1112 
F G "mbtowc" 8 1239 "sint8(*sint8 pwc,*sint8 s,int16 n)" `1109 
V L "s" 8 1244 "*sint8" `1114 
V L "wchar" 8 1244 "sint8" `1115 
F G "wctomb" 8 1245 "sint8(*sint8 s,sint8 wchar)" `1113 
V L "pwcs" 8 1250 "*sint8" `1117 
V L "s" 8 1250 "*sint8" `1118 
V L "n" 8 1250 "int16" `1119 
F G "mbstowcs" 8 1251 "int16(*sint8 pwcs,*sint8 s,int16 n)" `1116 
V L "s" 8 1256 "*sint8" `1121 
V L "pwcs" 8 1256 "*sint8" `1122 
V L "n" 8 1256 "int16" `1123 
F G "wcstombs" 8 1257 "int16(*sint8 s,*sint8 pwcs,int16 n)" `1120 
V G "_Randseed" 8 1266 "int32" `1124 
F G "rand" 8 1269 "int16()" `950 
V L "seed" 8 1274 "int32" `1129 
F G "srand" 8 1275 "void(int32 seed)" `951 
V L "p1" 8 1286 "*sint8" `1129 
V L "p2" 8 1286 "*sint8" `1130 
T G "*_Cmpfun" 8 1286 "sint16(*sint8 p1,*sint8 p2)" `1128 
V L "qdata" 8 1291 "*sint8" `1133 
V L "qitems" 8 1291 "int16" `1134 
V L "qsize" 8 1291 "int16" `1135 
V L "cmp" 8 1291 "_Cmpfun" `1136 
F G "qsort" 8 1291 "void(*sint8 qdata,int16 qitems,int16 qsize,_Cmpfun cmp)" `1132 
V L "m" 8 1292 "int16" `1137 
V L "j" 8 1292 "int16" `1138 
V L "i" 8 1292 "int16" `1139 
V L "l" 8 1292 "int16" `1140 
V L "done" 8 1293 "int1" `1141 
V L "t" 8 1294 "int8[16]" `1142 
V L "key" 8 1319 "*sint8" `1145 
V L "base" 8 1319 "*sint8" `1146 
V L "num" 8 1319 "int16" `1147 
V L "width" 8 1319 "int16" `1148 
V L "cmp" 8 1319 "_Cmpfun" `1149 
F G "bsearch" 8 1320 "*sint8(*sint8 key,*sint8 base,int16 num,int16 width,_Cmpfun cmp)" `1144 
V L "p" 8 1321 "*sint8" `1150 
V L "q" 8 1321 "*sint8" `1151 
V L "n" 8 1322 "int16" `1152 
V L "pivot" 8 1323 "int16" `1153 
V L "val" 8 1324 "sint16" `1154 
C L "bsearch" 8 328 1 "FUNCTION"
V G "t1_ticks" 0 20 "int16" `1155 
V G "u1_isr_cnt" 0 21 "int16" `1156 
V G "t1_isr_flag" 0 22 "int1" `1157 
V G "u1_isr_flag" 0 23 "int1" `1158 
C L "System_Init" 0 18 1 "FUNCTION"
F G "System_Init" 0 27 "void()" `1159  "LED<1:0>     *"
C L "System_Init" 0 18 2 "FUNCTION"
V L "tris_a" 0 32 "sint16" `1160 
C L "System_Init" 0 18 1 "FUNCTION"
V L "port_a" 0 35 "sint16" `1161 
C L "System_Init" 0 18 4 "FUNCTION"
V L "tris_b" 0 41 "sint16" `1162 
C L "System_Init" 0 18 1 "FUNCTION"
V L "port_b" 0 44 "sint16" `1163 
C L "System_Init" 0 18 2 "FUNCTION"
C L "System_Init" 0 18 1 "FUNCTION"
C L "System_Init" 0 18 1 "FUNCTION"
C L "System_Init" 0 18 2 "FUNCTION"
C L "System_Init" 0 18 1 "FUNCTION"
C L "System_Init" 0 18 3 "FUNCTION"
C L "System_Init" 0 18 3 "FUNCTION"
C L "System_Init" 0 64 1 "*"
C L "System_Init" 0 64 1 "*"
C L "System_Init" 0 64 1 "*"
C L "System_Init" 0 64 2 "FUNCTION"
C L "System_Init" 0 64 1 "FUNCTION"
C L "System_Init" 0 64 1 "FUNCTION"
C L "System_Init" 0 64 1 "FUNCTION"
F G "TIMER1_ISR" 0 95 "void()" `1165 
F G "System_GetTicks" 0 103 "int16()" `1166 
V L "tt" 0 105 "int16" `1167 
D G "U1_BUFF_LENGTH" 0 111 "64"
V G "u1_buff_put" 0 112 "int16" `1168 
V G "u1_buff_get" 0 113 "int16" `1169 
V G "u1_buff_cnt" 0 114 "int16" `1170 
V G "u1_buffer" 0 115 "sint8[64]" `1171 
F G "UART1_Isr" 0 118 "void()" `1172 
V L "c" 0 119 "sint8" `1173 
V L "c" 0 127 "sint8" `1175 
F G "U1QPut" 0 127 "sint8(sint8 c)" `1174 
F G "U1QGet" 0 136 "sint8()" `1176 
V L "c" 0 137 "sint8" `1177 
D G "FRAME_LENGHT" 0 148 "16"
V G "buffer_receive" 0 149 "sint8[16]" `1178 
V G "buffer_index" 0 150 "int8" `1179 
V G "buffer_output" 0 151 "sint8[16]" `1180 
V G "frame_received_flag" 0 152 "int1" `1181 
V L "c" 0 153 "sint8" `1183 
F G "Data_Processing" 0 153 "void(sint8 c)" `1182 
V L "state" 0 154 "int8" `1184 
V L "i" 0 172 "sint16" `1185 
F G "MAIN" 0 189 "void()" `1186  "Temporal variables *"
V L "counter" 0 192 "int16" `1187 
V L "cnt" 0 193 "int16" `1188 
V L "d_cnt" 0 193 "int16" `1189 
V L "s_ticks" 0 194 "int16" `1190 
V L "e_ticks" 0 194 "int16" `1191 
V L "adc0" 0 195 "sint16" `1192 
V L "adc1" 0 195 "sint16" `1193 
V L "adc2" 0 195 "sint16" `1194 
V L "adc3" 0 195 "sint16" `1195  "Disable global interrupt *"
C L "MAIN" 0 64 1 "FUNCTION"
C L "MAIN" 0 64 1 "FUNCTION"
C L "MAIN" 0 64 1 "FUNCTION"
C L "MAIN" 0 64 1 "FUNCTION"
C L "MAIN" 0 64 1 "FUNCTION"
C L "MAIN" 0 64 1 "FUNCTION"
V L "tone" 0 235 "sint16[1]" `1202 
V L "id" 0 236 "sint16" `1203 
V L "c" 0 248 "sint8" `1205 
V L "value" 0 259 "sint16" `1207 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 2
F B "crc_calc" 1 2
F B "crc_calc16" 1 2
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
